You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1

benim çözüm:
class Solution {
    public int maxArea(int[] height) {

        int left = 0 ;
        int right = height.length - 1;
        int currentArea = 0;
        int areaIndex = 0;
        int [] areas = new int[height.length];
        int distance = height.length-1;

        while(left<right){
            
            currentArea = distance * Math.min(height[left],height[right]);
            areas[areaIndex++] = currentArea;
            distance--;

            if(height[left] < height[right]){
                left++;
            }else right--;          
            
        }

        int max = Integer.MIN_VALUE;
        for(int i : areas){
            if(i>max){
                max = i;
            }
        }


        return max;
    }
}

claude optimizasyonu:
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxArea = 0;
        
        while (left < right) {
            // Alanı hesapla
            int currentArea = (right - left) * Math.min(height[left], height[right]);
            // Maksimum alanı güncelle
            maxArea = Math.max(maxArea, currentArea);
            
            // Daha kısa olan çubuğu hareket ettir
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }
        
        return maxArea;
    }
}